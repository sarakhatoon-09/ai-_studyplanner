import gradio as gr
from transformers import pipeline
import re

# Load GPT-2 text generation pipeline
gpt_model = pipeline("text-generation", model="gpt2")

def clean_generated_text(text):
    """ Remove unwanted artifacts like URLs or excessive newlines from GPT output. """
    text = re.sub(r"http\S+|www\S+|\.com\S*", "", text)  # Remove URLs
    return text.strip()

def generate_study_plan(subjects, goals, strengths, weaknesses, preferences, hours_per_day):
    subjects_list = [s.strip() for s in subjects.split(",")]
    strengths_list = [s.strip() for s in strengths.split(",")]
    weaknesses_list = [s.strip() for s in weaknesses.split(",")]

    total_study_time = float(hours_per_day)

    # Time distribution (percentage based)
    weakness_time = round(total_study_time * 0.6, 1)  # 60% for weaknesses
    strength_time = round(total_study_time * 0.3, 1)  # 30% for strengths
    general_time = round(total_study_time * 0.1, 1)   # 10% for general review

    # Divide time equally among subjects in strengths/weaknesses
    weakness_subject_time = round(weakness_time / len(weaknesses_list), 1) if weaknesses_list else 0
    strength_subject_time = round(strength_time / len(strengths_list), 1) if strengths_list else 0

    # Build table-like study plan
    timetable = "ðŸ“š Personalized Study Plan\n\n"
    timetable += f"ðŸŽ¯ Goal: {goals}\n\n"

    timetable += "| Time Allocation | Subject        | Focus Area                           |\n"
    timetable += "|-----------------|----------------|--------------------------------------|\n"

    # Weaknesses section
    if weaknesses_list:
        for subject in weaknesses_list:
            timetable += f"| {weakness_subject_time} hours | {subject} | Focus on concepts, practice, {preferences.lower()} techniques |\n"

    # Strengths section
    if strengths_list:
        for subject in strengths_list:
            timetable += f"| {strength_subject_time} hours | {subject} | Maintain proficiency, quick revision, teaching others |\n"

    # General Review section
    timetable += f"| {general_time} hours | All Subjects  | Summarize notes, revise formulas & concepts |\n"

    # Generate GPT-2 tips
    gpt_prompt = (
        f"Create personalized study strategies for a student aiming to {goals}. "
        f"The student is strong in {', '.join(strengths_list)} and weak in {', '.join(weaknesses_list)}. "
        f"The preferred learning style is {preferences}. Provide practical study tips."
    )

    gpt_response = gpt_model(gpt_prompt, max_length=200, num_return_sequences=1)[0]['generated_text']
    gpt_response = clean_generated_text(gpt_response)

    timetable += "\n\nðŸ’¡ AI Study Tips (Generated by GPT-2)\n"
    timetable += gpt_response

    return timetable

# Gradio Interface
interface = gr.Interface(
    fn=generate_study_plan,
    inputs=[
        gr.Textbox(label="Subjects (comma-separated)", placeholder="E.g., Math, Science, English"),
        gr.Textbox(label="Goals (Describe your goal)", placeholder="E.g., Crack JEE Mains"),
        gr.Textbox(label="Strengths (Subjects you're good at)", placeholder="E.g., Math, Physics"),
        gr.Textbox(label="Weaknesses (Where you need improvement)", placeholder="E.g., English, Chemistry"),
        gr.Radio(["Visual Learning", "Reading & Writing", "Practice Questions"], label="Preferred Learning Style"),
        gr.Number(label="Total Study Hours per Day", value=5)
    ],
    outputs=gr.Textbox(label="Personalized Study Plan"),
    title="ðŸ“– StudBud: AI Personalized Study Planner (with GPT Suggestions)"
)

if __name__ == "__main__":
    interface.launch(share=True)
